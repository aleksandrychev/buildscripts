# -*- mode:sh -*-

# Detect version of the software

get_version_string()
{
  DIR=$1

  grep '^[^a-zA-Z0-9_]VERSION=[^$]*$' $BASEDIR/$DIR/configure \
      | cut -d= -f2  \
      | tr -d \'
}

# Generate VERSION in the form of MAIN~SUPP, where SUPP is going in the
# "release" tag of RPMs (see "package" script).
ci_version()
{
    VERSION_IN=`get_version_string core`
    echo "Got VERSION: $VERSION_IN"

    # The version string is usually taken from git tags, thus it can be
    # 3.10.0b1-build1. Or from determine-version.py and then it can be
    # 3.10.0a.abcdef.

    # 3.10.0b1-build1: Replace dash with tilde and separate
    # MAIN from SUPPlementary version. Dashes confuse deb/rpm
    # packagers, and we use the tilde later to split it again.

    # 3.10.0a.abcdef: Here the MAIN version is all of the string, and
    # there is no SUPPlementary version.

    VERSION=$(echo "$VERSION_IN"  |  tr '-' '~')

    # Is it in correct form until the tilde?
    if echo "$VERSION" | egrep '^[0-9]+\.[0-9]+\.[0-9]+([ab][0-9]*)?(\.[0-9a-f]+)?(~.*)?$'
    then
        :    # correct
    else
        echo "Unable to parse version $VERSION_IN. Bailing out."
        exit 42
    fi

    echo "Setting VERSION: $VERSION"
}

release_version()
{
  VERSION=`get_version_string core`
  echo "Using VERSION: $VERSION"
}

continuous_version()
{
  MONTH=`date +"%m"`
  YEAR=`date +"%g"`
  MY_BUILD_NUMBER=$BUILD_NUMBER
  MY_MAJOR_VERSION=$MAJOR_VERSION
  echo "version is $MY_MAJOR_VERSION.$YEAR.$MONTH-$MY_BUILD_NUMBER"
  VERSION=$MY_MAJOR_VERSION.$YEAR.$MONTH-$MY_BUILD_NUMBER
}

if [ -z "$EXPLICIT_VERSION" ]
then
  case "$BUILD_TYPE" in
    RELEASE)
      release_version
      ;;
    DEBUG)
      ci_version
      ;;
    CODE_COVERAGE)
      ci_version
      VERSION="$VERSION.code_coverage"
      ;;
    *)
      echo "Unknown build type: $BUILD_TYPE"
      exit 42
      ;;
  esac
else
  VERSION=$EXPLICIT_VERSION
fi

# resolving release number is easy
RELEASE="${EXPLICIT_RELEASE:-1}"
export RELEASE
